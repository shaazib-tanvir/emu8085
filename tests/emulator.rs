use emu8085::emu::{CPU, Flags};

#[test]
fn sum_of_unsigned_numbers() {
    let mut cpu = CPU::new();
    cpu.load_data(&[0x03, 0x01, 0x02, 0x03, 0x00, 0x21, 0x00, 0x00, 0x4e, 0x3e, 0x00, 0x23, 0x86, 0x0d, 0xc2, 0x0b, 0x00, 0x23, 0x77, 0x76], 0);
    cpu.execute(0x05);

    assert_eq!(cpu.get_memory_at(0x04), 0x06, "the result at 0x0004 0x{:02x} is not 0x06", cpu.get_memory_at(0x04));
    assert!(cpu.get_flags().contains(Flags::ZERO | Flags::PARITY), "the flags {:?} do not contain ZERO and PARITY flag", cpu.get_flags());
}

#[test]
fn carry_flag_sum() {
    let mut cpu = CPU::new();
    cpu.load_data(&[0x03, 0x01, 0xfe, 0x03, 0x00, 0x21, 0x00, 0x00, 0x4e, 0x3e, 0x00, 0x23, 0x86, 0x0d, 0xc2, 0x0b, 0x00, 0x23, 0x77, 0x76], 0);
    cpu.execute(0x05);

    assert!(cpu.get_flags().contains(Flags::CARRY), "the flags {:?} do not contain CARRY flag", cpu.get_flags());
}

#[test]
fn multiply() {
    let mut cpu  = CPU::new();
    cpu.load_data(&[0x04, 0x04, 0x00], 0x2050);
    cpu.load_data(&[0x2a, 0x50, 0x20, 0x4c, 0x5d, 0x2e, 0x00, 0x26, 0x00, 0x16, 0x00, 0x19, 0x0d, 0xc2, 0x0b, 0x20, 0x22, 0x53, 0x20, 0x76], 0x2000);
    cpu.execute(0x2000);

    assert_eq!(cpu.get_memory_at(0x2053), 0x10, "the memory at 0x2053 {} is not 0x10", cpu.get_memory_at(0x2053));
}
